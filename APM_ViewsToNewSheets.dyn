{
  "Uuid": "019a674a-9529-4e6c-84ba-371b516002d0",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Colocar-VistasPlanosNuevos",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "62ab699e24fd4a588cecd607e5e77f6a",
      "Name": "Sheet number code",
      "Type": "string",
      "Value": "CODE_",
      "Description": "Crea una cadena"
    }
  ],
  "Outputs": [
    {
      "Id": "2cf9765c38654cfba8efcabf97134029",
      "Name": "Sheet.ByNameNumberTitleBlockAndView",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Crea un plano de Revit por el nombre de plano, número, un cuadro de rotulación FamilyType y un conjunto de vistas. Este método empaquetará automáticamente las vistas en el plano.\n\nSheet.ByNameNumberTitleBlockAndView (sheetName: string, sheetNumber: string, titleBlockFamilyType: FamilyType, view: View): Sheet"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "archilabUI.ViewTypesUi, archilabUI2022",
      "SelectedIndex": 7,
      "SelectedString": "Elevation",
      "NodeType": "ExtensionNode",
      "Id": "0576d08328f64c67bb3a75fdcd01866f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6a23a67c57b0461b998819c7192b22d4",
          "Name": "viewType",
          "Description": "The selected viewType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Retrieve all available View Types."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Views.Views.GetByType@string",
      "Id": "77958504572042a8998618d0b319a4e6",
      "Inputs": [
        {
          "Id": "d9934929426a47b182f1055c8e6799f6",
          "Name": "viewType",
          "Description": "View type to retrieve all views for. If View Template selected, 3D View Templates will be excluded from returned View Templates (currently a Dynamo limitation).\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3cd22b7287bc4fbbbdeb65c8b6615660",
          "Name": "view",
          "Description": "Views that match view type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get all views by type.\n\nViews.GetByType (viewType: string): Element[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Views.Sheet.ByNameNumberTitleBlockAndView@string,string,Revit.Elements.FamilyType,Revit.Elements.Views.View",
      "Id": "2cf9765c38654cfba8efcabf97134029",
      "Inputs": [
        {
          "Id": "a104aec8555748cfa7c3e0f9a1e0b4cc",
          "Name": "sheetName",
          "Description": "Nombre de plano como cadena.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5e8a778548a54a7587a8717a01530796",
          "Name": "sheetNumber",
          "Description": "Número de plano como cadena.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b060dff9a70e4eab8ef2b564a1e99c6a",
          "Name": "titleBlockFamilyType",
          "Description": "Cuadro de rotulación que se asignará al plano creado.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "760d5d03ea4f4ff788734e4e3f8bd90c",
          "Name": "view",
          "Description": "Vistas que se insertarán en el plano.\n\nView",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dd9c4890b4a54daf9705cc3507585bb3",
          "Name": "Sheet",
          "Description": "Sheet",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Crea un plano de Revit por el nombre de plano, número, un cuadro de rotulación FamilyType y un conjunto de vistas. Este método empaquetará automáticamente las vistas en el plano.\n\nSheet.ByNameNumberTitleBlockAndView (sheetName: string, sheetNumber: string, titleBlockFamilyType: FamilyType, view: View): Sheet"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 257,
      "SelectedString": "E1 30 x 42 Horizontal:E1 30x42 Horizontal",
      "NodeType": "ExtensionNode",
      "Id": "51c050018e4d495fabb708167d9416d7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1f90998906946ac9ea86c357e8c734b",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Todos los tipos de familia disponibles en el documento"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "fd15ce8c0b114134b0e997a91df8204f",
      "Inputs": [
        {
          "Id": "4d9702033e78422bbf7d06429923fb6b",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6d611d102da426cb28f4eaffaced0b3",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtiene el nombre del elemento.\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "35828a09054343ff857bc4cf61eb11db",
      "Inputs": [
        {
          "Id": "1c43326e44714d43ab8f6e456656472d",
          "Name": "list",
          "Description": "Lista de la que se debe obtener el recuento de elementos.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fde23ca75d3c4665af78734528e369b2",
          "Name": "count",
          "Description": "Longitud de la lista.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Devuelve el número de elementos almacenados en la lista especificada.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[1..num];",
      "Id": "a627225c0330418ea66ddaaead7fc5b9",
      "Inputs": [
        {
          "Id": "82e9ebb1a38041898839ad7a405718eb",
          "Name": "num",
          "Description": "num",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ba70cf6cfed472e8f7855769962d8b6",
          "Name": "",
          "Description": "Valor de la expresión en la línea 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permite creación directa de código de DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "CODE_",
      "Id": "62ab699e24fd4a588cecd607e5e77f6a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e721538b5ce84930ba282a6769a7197c",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Crea una cadena"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "+@var[]..[],var[]..[]",
      "Id": "6ffa500eea7a46679d828ec921d18146",
      "Inputs": [
        {
          "Id": "fe0f35b42a8646308705c12b62be4e67",
          "Name": "x",
          "Description": "Valor X.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "56e363286b384499b40f8b3634d6f9c6",
          "Name": "y",
          "Description": "Valor Y.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5c43817edd2b4b9082788693dd05468a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Suma X a Y.\n\n+ (x: var[]..[], y: var[]..[]): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "6a23a67c57b0461b998819c7192b22d4",
      "End": "d9934929426a47b182f1055c8e6799f6",
      "Id": "66a25182accc4bd5905808c853134819"
    },
    {
      "Start": "3cd22b7287bc4fbbbdeb65c8b6615660",
      "End": "4d9702033e78422bbf7d06429923fb6b",
      "Id": "d661963c102347d18f217b9e2b33c542"
    },
    {
      "Start": "3cd22b7287bc4fbbbdeb65c8b6615660",
      "End": "1c43326e44714d43ab8f6e456656472d",
      "Id": "d77d4dd9a32346f4b560b14c48c08df5"
    },
    {
      "Start": "c1f90998906946ac9ea86c357e8c734b",
      "End": "b060dff9a70e4eab8ef2b564a1e99c6a",
      "Id": "1860210c32c54b7587f29a85edb513bd"
    },
    {
      "Start": "c6d611d102da426cb28f4eaffaced0b3",
      "End": "a104aec8555748cfa7c3e0f9a1e0b4cc",
      "Id": "82d272c373a448e29eb9a6375e788f20"
    },
    {
      "Start": "fde23ca75d3c4665af78734528e369b2",
      "End": "82e9ebb1a38041898839ad7a405718eb",
      "Id": "e335fac9f7c54e49bf0dcadeedd7df19"
    },
    {
      "Start": "2ba70cf6cfed472e8f7855769962d8b6",
      "End": "56e363286b384499b40f8b3634d6f9c6",
      "Id": "4c6da452ee7b4eec80c303f292c9dd04"
    },
    {
      "Start": "e721538b5ce84930ba282a6769a7197c",
      "End": "fe0f35b42a8646308705c12b62be4e67",
      "Id": "54f061c6ff8f4d8c83c80cd3f705dc7d"
    },
    {
      "Start": "5c43817edd2b4b9082788693dd05468a",
      "End": "5e8a778548a54a7587a8717a01530796",
      "Id": "ea5da12a9055440c9efffac34daf2248"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "archi-lab.net",
      "Version": "2023.213.1722",
      "ReferenceType": "Package",
      "Nodes": [
        "0576d08328f64c67bb3a75fdcd01866f",
        "77958504572042a8998618d0b319a4e6"
      ]
    }
  ],
  "Bindings": [
    {
      "NodeId": "2cf9765c-3865-4cfb-a8ef-cabf97134029",
      "Binding": {
        "ByNameNumberTitleBlockAndView_InClassDecl-1_InFunctionScope-1_Instance0_2cf9765c-3865-4cfb-a8ef-cabf97134029": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.5.0.7460",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Vista preliminar en segundo plano",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "View Type",
        "Id": "0576d08328f64c67bb3a75fdcd01866f",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -472.71601374703704,
        "Y": 294.25100196942634
      },
      {
        "ShowGeometry": true,
        "Name": "Views.GetByType",
        "Id": "77958504572042a8998618d0b319a4e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -255.50020914705345,
        "Y": 294.80907005074511
      },
      {
        "ShowGeometry": true,
        "Name": "Sheet.ByNameNumberTitleBlockAndView",
        "Id": "2cf9765c38654cfba8efcabf97134029",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 947.38593191617952,
        "Y": 246.57156980799078
      },
      {
        "ShowGeometry": true,
        "Name": "Family Types",
        "Id": "51c050018e4d495fabb708167d9416d7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 421.9165298927299,
        "Y": 382.13929260561343
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "fd15ce8c0b114134b0e997a91df8204f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 97.283986252962961,
        "Y": 115.65782158145882
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "35828a09054343ff857bc4cf61eb11db",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 105.59203075892208,
        "Y": 309.99443157356546
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a627225c0330418ea66ddaaead7fc5b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 396.7980725293894,
        "Y": 273.42789456579419
      },
      {
        "ShowGeometry": true,
        "Name": "Sheet number code",
        "Id": "62ab699e24fd4a588cecd607e5e77f6a",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 395.78869740145763,
        "Y": 200.58578098927597
      },
      {
        "ShowGeometry": true,
        "Name": "+",
        "Id": "6ffa500eea7a46679d828ec921d18146",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 595.86094357077013,
        "Y": 206.83053819354524
      }
    ],
    "Annotations": [
      {
        "Id": "29d346234be544739a3505fda0475858",
        "Title": "SHEETS NAME:\r\n--------------",
        "Nodes": [
          "fd15ce8c0b114134b0e997a91df8204f"
        ],
        "Left": 87.283986252962961,
        "Top": 48.057821581458818,
        "Width": 222.4,
        "Height": 160.2,
        "FontSize": 24.0,
        "InitialTop": 115.65782158145882,
        "InitialHeight": 145.0,
        "TextblockHeight": 57.6,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "33c67360a93c42b790e8e268b435b4e8",
        "Title": "SELECT VIEW TYPE:\r\n-----------------",
        "Nodes": [
          "0576d08328f64c67bb3a75fdcd01866f",
          "77958504572042a8998618d0b319a4e6"
        ],
        "Left": -482.71601374703704,
        "Top": 226.65100196942635,
        "Width": 438.81580459998361,
        "Height": 160.75806808131875,
        "FontSize": 24.0,
        "InitialTop": 294.25100196942634,
        "InitialHeight": 145.0,
        "TextblockHeight": 57.6,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "d1c26ceb0d4e4ec89df324435292e37b",
        "Title": "CREATE SHEETS:\r\n------------",
        "Nodes": [
          "2cf9765c38654cfba8efcabf97134029"
        ],
        "Left": 937.38593191617952,
        "Top": 178.97156980799079,
        "Width": 296.8,
        "Height": 237.0,
        "FontSize": 24.0,
        "InitialTop": 246.57156980799078,
        "InitialHeight": 145.0,
        "TextblockHeight": 57.6,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "84ad106a4eb9417da46197d2107c8c67",
        "Title": "SHEET NUMBER:\r\n---------------",
        "Nodes": [
          "a627225c0330418ea66ddaaead7fc5b9",
          "62ab699e24fd4a588cecd607e5e77f6a",
          "6ffa500eea7a46679d828ec921d18146"
        ],
        "Left": 385.78869740145763,
        "Top": 132.98578098927598,
        "Width": 388.87224616931252,
        "Height": 233.0421135765182,
        "FontSize": 24.0,
        "InitialTop": 200.58578098927597,
        "InitialHeight": 195.44211357651821,
        "TextblockHeight": 57.6,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "da19e6d1ad9c48de80e500e7ab70ffc9",
        "Title": " # OF VIEWS:\r\n--------",
        "Nodes": [
          "35828a09054343ff857bc4cf61eb11db"
        ],
        "Left": 95.592030758922078,
        "Top": 242.39443157356547,
        "Width": 190.4,
        "Height": 160.2,
        "FontSize": 24.0,
        "InitialTop": 309.99443157356546,
        "InitialHeight": 122.6,
        "TextblockHeight": 57.6,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "904b6e2e63a54f01be66fb96f823f6d4",
        "Title": "INSTRUCTIONS:\r\n-----------------\r\nDefinition created to place existing views to new sheets. Using the view names to named our sheets and creating the sheet numbers with a prefix + the sequence of views.",
        "Nodes": [],
        "Left": -491.251807406425,
        "Top": 93.215198951570642,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 372.32730513327061,
    "Y": 552.4334091669333,
    "Zoom": 0.43225323452256814
  }
}